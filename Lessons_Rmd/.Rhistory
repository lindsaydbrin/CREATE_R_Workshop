# SR13
setkey(SR13Denit,Datecode,Jar)
SR13Denit[setkey(SR13JarWeights,Datecode,Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SD14
setkey(SD14Denit,Datecode,Jar)
SD14Denit[setkey(SD14JarWeights,Datecode,Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14
setkey(SR14Denit,Datecode,Jar)
SR14Denit[setkey(SR14JarWeights,Datecode,Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14.3 Jar 5 was incubated with an iButton, so I need to subtract this volume from the headspace.
# To do this, I am adding it to the SoilVolume here, before CalcNProdn (SoilDryWt has already been
#  calculated anyhow, and SoilVolume is only used to calculate Headspace).
SR14Denit[Datecode=="SR14.3" & Jar=="5",":=" (SoilVolume=SoilVolume+0.00062)]
# Calculate N or C produced at each timepoint
SD13Denit <- CalcNProdn(SD13Denit)
SR13Denit <- CalcNProdn(SR13Denit)
SD14Denit <- CalcNProdn(SD14Denit)
SR14Denit <- CalcNProdn(SR14Denit)
names(SD13Denit)
View(SD13Denit)
SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
library(dplyr)
SD13Denit <- SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
SD13Denit %>% select(mgCperkg)
SD13Denit %>% select(Location)
SD13Denit %>% View()
join(data.table(read.csv(paste(SD13DenitInputPath,"SD13 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left") %>% names()
JarVolsWeights
SD13Denit$Location
which(names(SD13Denit)=="Location")
which(SD13Denit[,6]!=SD13Denit[,19])
SD13Denit[,6]
SD13Denit[,9]
SD13Denit[9]
SD13Denit[,"Location"]
SD13Denit[,9, with = F]
SD13Denit[,6, with = F]
which(SD13Denit[,6, with = F]!=SD13Denit[,19, with = F])
select(JarVolsWeights, -Location)
select(JarVolsWeights, -Location)
SR13JarWeights
SD13Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SD13 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left")
SD13Denit$Datecode <- as.character(SD13Denit$Datecode)  # Otherwise the join fails later, because Datecode has to be the same type in both datasets
SR13Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SR13 Respiration.csv",sep=""),sep=",",header=T)),MinuteTimepointsSummer,by=c("Minutes"),type="left")
SR13Denit$Datecode <- as.character(SR13Denit$Datecode)
SR13Denit[,":="(Hour=Minutes/60)]
SR13Denit[Jar=="Blank"|Jar=="Standard",":="(WaterVolume=0,Temperature=0)]  # To keep DissolvedCO2 from bombing
SD14Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SD14 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left")
SD14Denit$Datecode <- as.character(SD14Denit$Datecode)
SR14Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SR14 Respiration.csv",sep=""),sep=",",header=T)),MinuteTimepointsSummer,by=c("Minutes"),type="left")
SR14Denit$Datecode <- as.character(SR14Denit$Datecode)
SR14Denit[,":="(Hour=Minutes/60)]
SR14Denit[Jar=="Blank"|Jar=="Standard",":="(WaterVolume=0,Temperature=0)]  # To keep DissolvedCO2 from bombing
# Add: SoilDryWt, SoilVolume, WaterVolume and Temperature
#   Volumes from "Denit_SD13_JarWeights.R" are in L
#   Soil dry weight is in g
# The match is done by Datecode and Jar, and the data frame already has the variable Location, so the redundant Location is removed from JarVolsWeights.
# Note that matching is by Jar rather than Location because there are two jars/location (acetylene and compressed air)
setnames(JarVolsWeights, old="DryWt", new="SoilDryWt")
SD13Denit <- join(SD13Denit,select(JarVolsWeights, -Location),by=c("Datecode","Jar"),type="left")
# SR13
setkey(SR13Denit,Datecode,Jar)
SR13Denit[setkey(select(SR13JarWeights, -Location), Datecode, Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SD14
setkey(SD14Denit,Datecode,Jar)
SD14Denit[setkey(select(SD14JarWeights, -Location), Datecode, Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14
setkey(SR14Denit,Datecode,Jar)
SR14Denit[setkey(select(SR14JarWeights, - Location), Datecode, Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14.3 Jar 5 was incubated with an iButton, so I need to subtract this volume from the headspace.
# To do this, I am adding it to the SoilVolume here, before CalcNProdn (SoilDryWt has already been
#  calculated anyhow, and SoilVolume is only used to calculate Headspace).
SR14Denit[Datecode=="SR14.3" & Jar=="5",":=" (SoilVolume=SoilVolume+0.00062)]
# Calculate N or C produced at each timepoint
SD13Denit <- CalcNProdn(SD13Denit)
SR13Denit <- CalcNProdn(SR13Denit)
SD14Denit <- CalcNProdn(SD14Denit)
SR14Denit <- CalcNProdn(SR14Denit)
SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
SD13Denit <- SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit)
abline(a = 0, b = 1)
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit, xlim = c(0, 16), ylim = c(0, 16))
abline(a = 0, b = 1)
names(SD13Denit)
SD13Denit$Temperature
unique(sort(SD13Denit$Temperature))
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit %>% filter(Temperature >= -1.5 & Temperature < 1.5), xlim = c(0, 16), ylim = c(0, 16))
points(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit %>% filter(Temperature >= -1 & Temperature < 1), col = "red")
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit, xlim = c(0, 16), ylim = c(0, 16))
abline(a = 0, b = 1)
points(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit %>% filter(Temperature >= -1 & Temperature < 1), col = "red")
summary(lm(DissolvedCO2check ~ DissolvedCO2))
summary(lm(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit))
SD13Denit$DissolvedCO2/SD13Denit$DissolvedCO2check
summary(SD13Denit$DissolvedCO2/SD13Denit$DissolvedCO2check)
summary(SD13Denit$DissolvedCO2 / SD13Denit$mgCperkg) # aquaenv:
summary(SD13Denit$DissolvedCO2check / SD13Denit$mgCperkg) # Henry's law:
SD14Denit <- SD14Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
SD14Denit <- SD14Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
plot(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit, xlim = c(0, 16), ylim = c(0, 16))
abline(a = 0, b = 1)
summary(lm(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit))
summary(SD14Denit$DissolvedCO2 / SD14Denit$DissolvedCO2check)
summary(SD14Denit$DissolvedCO2 / SD14Denit$mgCperkg) # aquaenv: dissolved is 0.21 to 1.96 times headspace
summary(SD14Denit$DissolvedCO2check / SD14Denit$mgCperkg) # Henry's law: dissolved is 0.03 to 0.35 times headspace
points(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit %>% filter(Temperature >= -1 & Temperature < 1), col = "red")
points(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit %>% filter(Temperature ==0), col = "blue")
##
## Statistics for Microbial MS SD13.R
## LDBrin, start: Aug 2016
##
## Statistical analysis of SD13 microbial data
## Based on Statistics for Biogeo MS SD13.R
##
##-----------##
## Set paths ##
##-----------##
# Directory for this R file and related files
SD13RPath <- "/Users/lindsay/Documents/PRC/Analysis/Rfiles/SD13/"
# Combined Output - Data and plots from multiple data sources
SD13CombinedOutputPath <- "/Users/lindsay/Documents/PRC/Analysis/Output/SD13/Combined/"
# qPCR data
SD13qPCROutputDataPath <- "/Users/lindsay/Documents/PRC/Data/SD13/Molecular/qPCR Data/Output data/"
# Load packages
library(data.table)
library(car)
library(multcompView)
library(lsmeans)
library(nlme)
library(dplyr)
summarize <- dplyr::summarize
summarise <- dplyr::summarise
##------------------------------------------------------##
## Run script for data tables of metadata               ##
##------------------------------------------------------##
source(paste(SD13RPath,"Set Up Metadata.R",sep=""))  # Data tables such as Treatments, Plots, Dates, etc.
# Including SD13datelistSoil
##-----------##
## Read data ##
##-----------##
megaSD13 <- data.table(read.csv(paste(SD13CombinedOutputPath,"Data/megaSD13.csv",sep=""),sep=",",header=T))
megaSD13micro <- megaSD13[Datecode %in% SD13datelistSoil$Datecode & Location %in% SD13plotlistSoil]  # Winter and summer, but only main plots from transects, and reps 1-3 of A and R
megaSD13microWinter <- megaSD13micro[Period != "Summer"]  # Winter only; otherwise as above
megaSD13microSummer <- megaSD13micro[Period == "Summer"]  # Summer only; otherwise as above
megaSD14 <- data.table(read.csv(paste(SD13CombinedOutputPath,"Data/megaSD14.csv",sep=""),sep=",",header=T))
megaSD14micro <- megaSD14[Datecode %in% SD14datelistSoil$Datecode & Location %in% SD13plotlistSoil]  # Winter and summer, but only main plots from transects, and reps 1-3 of A and R
megaSD14microWinter <- megaSD14micro[Period != "Summer"]  # Winter only; otherwise as above
megaSD14microSummer <- megaSD14micro[Period == "Summer"]  # Summer only; otherwise as above
## -----------------------------------------------------------------------------------------##
## Function to make plots to check normal distribution and homogeneity of variance,         ##
##  with and without log-transformation                                                     ##
## -----------------------------------------------------------------------------------------##
# Based on makeNormalPlots in similar analysis for Biogeo ms, but with the addition of histograms
makeNormalPlots2 <- function(megaName, varName, logbase=exp(1), logTransPlots = TRUE) {
keepvals <- !is.na(c(data.matrix(get(megaName)[,varName,with=F])))  # Which values are not NA?
datecodex <- unlist(get(megaName)[,"Datecode",with=F])[keepvals]
treatx <- unlist(get(megaName)[,"Treatment3",with=F])[keepvals]
#       datecodex <- c(data.matrix(get(megaName)[,"Datecode",with=F]))[keepvals]
#       treatx <- c(data.matrix(get(megaName)[,"Treatment3",with=F]))[keepvals]
par(mfrow=c(2,4))
if (logTransPlots == FALSE){par(mfrow = c(2,2))}
for (t in c(1:2)) {
# Set y (untransformed or log-transformed)
if (t == 1) {
y <- c(data.matrix(get(megaName)[,varName,with=F]))[keepvals] }  # data.matrix converts from a list to a matrix; c makes it a vector
# if logTransPlots == FALSE, skip the log-transformation version
if (logTransPlots == FALSE & t == 2){return(print("Did not plot log-transformed data."))}
if (t == 2) {
y <- log(c(data.matrix(get(megaName)[,varName,with=F])) + 1, base=logbase)[keepvals] }
# Normality of residuals (qq plots)
# Store the model:
model <- lm(y ~ datecodex * treatx, contrasts=list(datecodex=contr.sum, treatx=contr.sum))
qqnorm(residuals(model))
qqline(residuals(model))
#             qqnorm(residuals(aov(y ~ treatx * datecodex)))
#             qqline(residuals(aov(y ~ treatx * datecodex)))
if (t == 1) {mtext(text="Non-transformed",side=3, line=3, adj=0, col="red")}
if (t == 2) {mtext(text="Log-transformed",side=3, line=3, adj=0, col="red")}
# Histogram of residuals
hist(residuals(model))
# Homogeneity of variance
#             print(paste("Bartlett test on Treatment: ",bartlett.test(residuals(aov(y ~ treatx*datecodex)),treatx),sep=""))  # Treatment
#             print(paste("Bartlett test on Treatment: ",bartlett.test(residuals(aov(y ~ treatx*datecodex)),datecodex),sep=""))  # Datecode
# Plot
plot(residuals(model) ~ treatx, main = "Residuals against Treatment")
plot(residuals(model) ~ datecodex, main = "Residuals against Datecode")
}
layout(matrix(1,1,1))
}
## -----------------------------------------------------------------------------------------##
## Function to run 2-way ANOVA for datecode and treatment                                   ##
## -----------------------------------------------------------------------------------------##
# Add something that takes out certain dates (for denit when incubator failed, and gas wells when sampling port was buried)
makeANOVA <- function(megaName, varName, logTrans, logbase=exp(1), printIntx=FALSE) {
keepvals <- !is.na(c(data.matrix(get(megaName)[,varName,with=F])))  # Which values are not NA?
datecodex <- unlist(get(megaName)[,"Datecode",with=F])[keepvals]
treatx <- unlist(get(megaName)[,"Treatment3",with=F])[keepvals]
# 2-way ANOVA
# Set y (untransformed or log-transformed)
if (logTrans == FALSE) {
y <- c(data.matrix(get(megaName)[,varName,with=F]))[keepvals] }  # data.matrix converts from a list to a matrix; c makes it a vector
if (logTrans == TRUE) {
y <- log(c(data.matrix(get(megaName)[,varName,with=F])) + 1, base=logbase)[keepvals] }
# Store the model:
model <- lm(y ~ datecodex * treatx, contrasts=list(datecodex=contr.sum, treatx=contr.sum))
# Call the drop1 function on each model component:
ANOVAresults <- drop1(model, .~., test="F")
print(ANOVAresults)
# Post-hoc
# Main effects
print("Datecode, main effects:")
lsm = lsmeans(model, "datecodex") ; out <- as.data.table(cld(lsm, alpha=.05, adjust="tukey", decreasing=TRUE, Letters=letters))
out <- out %>% mutate(DateNumber = as.numeric(substr(datecodex,6,7)),
Season = substr(datecodex,2,2))
# First order by season (SD/SR), then by date number.
# (Computationally, do the opposite.)
out <- out[order(out$DateNumber),][order(out[order(out$DateNumber),]$Season),]
print(out)
print("Treatment, main effects:")
lsm = lsmeans(model, "treatx") ; out <- as.data.table(cld(lsm, alpha=.05, adjust="tukey", decreasing=TRUE, Letters=letters))
out <- out[match(c("Tpos1","A","R"), out$treatx),]
print(out)
# Interactions
# Brute force value extraction approach - double check that p-values are extracted correctly!
if (printIntx==TRUE) {
lsm <- lsmeans(model, pairwise~datecodex:treatx)
lsmout <- as.data.table(capture.output(lsm$contrasts))
lsmout[,":="(contrast=substr(V1,2,25),p.value=substr(V1,67,73),p.value2=substr(V1,67,74))] # p.value2 allows for the < sign, i.e., "<.001"
lsmout[,":=" (p.value=as.numeric(p.value))]
lsmout[p.value2=="<.0001" | p.value2==" <.0001",":="(p.value=0.00005)]
# Brute force extraction of datecodes and treatments
for (i in 1:dim(lsmout)[1]){
lsmout$Datecode1[i] <- strsplit(lsmout$contrast[i],",")[[1]][1]
lsmout$Datecode2[i] <- strsplit(strsplit(lsmout$contrast[i],",")[[1]][2]," - ")[[1]][2]
lsmout$Treat1[i] <- strsplit(strsplit(lsmout$contrast[i],",")[[1]][2]," - ")[[1]][1]
lsmout$Treat2[i] <- substr(strsplit(lsmout$contrast[i],",")[[1]][3],1,1)
}
setkey(lsmout,Datecode1)
#             lsmout[Datecode1==Datecode2]  # SD14: R is not compared to T for any of the summer samplings....?????
print(lsmout[Datecode1==Datecode2 & p.value<0.05])
print("p-value subsetting test:")
print(lsmout$p.value[3:5])
print(lsmout$p.value2[3:5])
}
}
megaSD13micro <- megaSD13micro %>%
mutate(nosZ_nirS_ratio = nosZ/nirS,
nosZ_nirK_ratio = nosZ/nirK)
megaSD14micro <- megaSD14micro %>%
mutate(nosZ_nirS_ratio = nosZ/nirS,
nosZ_nirK_ratio = nosZ/nirK)
options(digits=7)
options(scipen=(0))  # this is set and re-set later, too
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (gene in c("nirS", "nirK")) {
plot(get("DenitN2O") ~ get(paste0("nosZ_",gene,"_ratio")),
data = get(dfname),
axes = TRUE, col = as.character(TreatColor), pch = 19, las = 1,
xlab = paste0("nosZ/",gene),
ylab = "N2O production",
log = "y")
if (gene == "nirS") {
if (dfname == "megaSD13micro") {
mtext(side = 3, line = 1, text = "2013 - 2014")
legend("topright", pch = 19,
col = c("cornflowerblue", "lightgreen", "red2"),
legend = c("Snow accumulation", "Ambient snow", "Snow removal"),
bty = "y"
)
}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 1, text = "2014 - 2015")}
}
}
}
par(mfrow = c(2,2))
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (gene in c("nirS", "nirK")) {
plot(get("DenitN2O") ~ get(paste0("nosZ_",gene,"_ratio")),
data = get(dfname),
axes = TRUE, col = as.character(TreatColor), pch = 19, las = 1,
xlab = paste0("nosZ/",gene),
ylab = "N2O production",
log = "y")
if (gene == "nirS") {
if (dfname == "megaSD13micro") {
mtext(side = 3, line = 1, text = "2013 - 2014")
legend("topright", pch = 19,
col = c("cornflowerblue", "lightgreen", "red2"),
legend = c("Snow accumulation", "Ambient snow", "Snow removal"),
bty = "y"
)
}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 1, text = "2014 - 2015")}
}
}
}
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (gene in c("nirS", "nirK")) {
print(c(dfname, gene))
lm(log(get("DenitN2O")) ~ get(paste0("nosZ_",gene,"_ratio")),
data = get(dfname)) %>%
summary() %>% print()
}
}
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (gene in c("nirS", "nirK")) {
print(c(dfname, gene))
lm(log(get("DenitN2O")+1) ~ get(paste0("nosZ_",gene,"_ratio")),
data = get(dfname)) %>%
summary() %>% print()
}
}
quartz(type="pdf", file=paste(SD13CombinedOutputPath,"Figures/N2O production versus nosZ-nir ratios - log.pdf",sep=""),height=8.5,width=11,pointsize=14)
par(omi=c(1,1,1,1), mar=c(7,4,2,2), mfrow = c(2,2))
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (gene in c("nirS", "nirK")) {
plot(get("DenitN2O") ~ get(paste0("nosZ_",gene,"_ratio")),
data = get(dfname),
axes = TRUE, col = as.character(TreatColor), pch = 19, las = 1,
xlab = paste0("nosZ/",gene),
ylab = "N2O production",
log = "y")
if (gene == "nirS") {
if (dfname == "megaSD13micro") {
mtext(side = 3, line = 1, text = "2013 - 2014")
legend("topright", pch = 19,
col = c("cornflowerblue", "lightgreen", "red2"),
legend = c("Snow accumulation", "Ambient snow", "Snow removal"),
bty = "y"
)
}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 1, text = "2014 - 2015")}
}
}
}
dev.off()
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (gene in c("nirS", "nirK")) {
plot(get("DenitN2O") ~ get(paste0("nosZ_",gene,"_ratio")),
data = get(dfname),
axes = TRUE, col = as.character(TreatColor), pch = 19, las = 1,
# log = "y",
xlab = paste0("nosZ/",gene),
ylab = "N2O production")
if (gene == "nirS") {
if (dfname == "megaSD13micro") {
mtext(side = 3, line = 1, text = "2013 - 2014")
legend("topright", pch = 19,
col = c("cornflowerblue", "lightgreen", "red2"),
legend = c("Snow accumulation", "Ambient snow", "Snow removal"),
bty = "y"
)
}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 1, text = "2014 - 2015")}
}
}
}
megaSD13micro$VWC_delta3
megaSD13micro$VWC_delta3 %>% hist()
megaSD13micro %>% filter(VWC_delta3 > 0)
megaSD13micro %>% filter(VWC_delta3 > 0) %>% select(AOBratio)
megaSD13micro %>% filter(VWC_delta3 > 0) %>% select(VWC_delta3, AOBratio)
megaSD13micro %>% filter(VWC_delta3 > 0) %>% select(VWC_delta3, AOBratio) %>% plot()
megaSD13micro %>% select(VWC_delta3, AOBratio) %>% plot()
megaSD14micro %>% select(VWC_delta3, AOBratio) %>% plot()
megaSD13micro %>% select(VWC_delta3, AOBratio) %>% plot()
megaSD13micro %>% select(VWC_delta3, AOAratio) %>% plot()
megaSD13micro %>% select(VWC_delta3, nosZratio) %>% plot()
megaSD13micro %>% select(VWC_delta3, nosZratio) %>% plot()
megaSD14micro %>% select(VWC_delta3, AOBratio) %>% plot()
megaSD14micro %>% select(VWC_delta3, AOAratio) %>% plot()
megaSD14micro %>% select(VWC_delta3, nosZratio) %>% plot()
megaSD13micro %>% select(VWC_delta6, AOBratio) %>% plot()
megaSD13micro %>% select(VWC_delta6, AOBratio) %>% plot()
megaSD13micro %>% select(VWC_delta6, AOAratio) %>% plot()
megaSD13micro %>% select(VWC_delta6, nosZratio) %>% plot()
megaSD13micro %>% select(VWC_delta6, nosZratio) %>% plot()
megaSD14micro %>% select(VWC_delta6, AOBratio) %>% plot()
megaSD14micro %>% select(VWC_delta6, AOAratio) %>% plot()
megaSD14micro %>% select(VWC_delta6, nosZratio) %>% plot()
quartz(type="pdf", file=paste(SD13CombinedOutputPath,"Figures/Expression versus changing soil conditions.pdf",sep=""),height=8.5,width=11,pointsize=14)
par(omi=c(1,1,1,1), mar=c(7,4,2,2), mfrow = c(2, 3))
for (xvar in c("VWC_delta3", "VWC_delta6")){
for(dfname in c("megaSD13micro", "megaSD14micro")){
# Set x-axis limits based on dataset
if (xvar == "VWC_delta3"){if (dfname == "megaSD13micro"){xlimits <- c(-0.04, 0.02)} else {xlimits <- c(-0.025, 0.05)}}
if (xvar == "VWC_delta6"){xlimits <- c(-0.15, 0.05)}
for (RNAgene in c("AOBratio", "AOAratio", "nosZratio")) {
plot(get(RNAgene) ~ get(xvar), data = get(dfname), axes = FALSE,
col = as.character(TreatColor), pch = 19, xlab = xvar, ylab = RNAgene,
xlim = c(-0.3, 0.1))
axis(1, pos = 0)
axis(2, pos = -0.3, las = 1)
mtext(side = 3, line = 1, text = RNAgene)
if (RNAgene == "AOBratio") {
if (dfname == "megaSD13micro") {mtext(side = 3, line = 3, text = "2013 - 2014")}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 3, text = "2014 - 2015")}
}
if (dfname == "megaSD13micro" & RNAgene == "AOAratio") {mtext(side = 3, line = 3, text = xvar)}
}
}
}
xvar <- "Temp_delta3"
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (RNAgene in c("AOBratio", "AOAratio", "nosZratio")) {
plot(get(RNAgene) ~ get(xvar), data = get(dfname), axes = FALSE,
col = as.character(TreatColor), pch = 19, xlab = xvar, ylab = RNAgene,
xlim = c(-6, 6))
axis(1, pos = 0)
axis(2, pos = -6, las = 1)
mtext(side = 3, line = 1, text = RNAgene)
if (RNAgene == "AOBratio") {
if (dfname == "megaSD13micro") {mtext(side = 3, line = 3, text = "2013 - 2014")}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 3, text = "2014 - 2015")}
}
if (dfname == "megaSD13micro" & RNAgene == "AOAratio") {mtext(side = 3, line = 3, text = xvar)}
}
}
dev.off()
quartz(type="pdf", file=paste(SD13CombinedOutputPath,"Figures/Expression versus changing soil conditions.pdf",sep=""),height=8.5,width=11,pointsize=14)
par(omi=c(1,1,1,1), mar=c(7,4,2,2), mfrow = c(2, 3))
for (xvar in c("VWC_delta3", "VWC_delta6")){
for(dfname in c("megaSD13micro", "megaSD14micro")){
# Set x-axis limits based on dataset
if (xvar == "VWC_delta3"){if (dfname == "megaSD13micro"){xlimits <- c(-0.04, 0.02)} else {xlimits <- c(-0.025, 0.05)}}
if (xvar == "VWC_delta6"){xlimits <- c(-0.15, 0.05)}
for (RNAgene in c("AOBratio", "AOAratio", "nosZratio")) {
plot(get(RNAgene) ~ get(xvar), data = get(dfname), axes = FALSE,
col = as.character(TreatColor), pch = 19, xlab = xvar, ylab = RNAgene,
xlim = xlimits)
axis(1, pos = 0)
axis(2, pos = -0.3, las = 1)
mtext(side = 3, line = 1, text = RNAgene)
if (RNAgene == "AOBratio") {
if (dfname == "megaSD13micro") {mtext(side = 3, line = 3, text = "2013 - 2014")}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 3, text = "2014 - 2015")}
}
if (dfname == "megaSD13micro" & RNAgene == "AOAratio") {mtext(side = 3, line = 3, text = xvar)}
}
}
}
xvar <- "Temp_delta3"
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (RNAgene in c("AOBratio", "AOAratio", "nosZratio")) {
plot(get(RNAgene) ~ get(xvar), data = get(dfname), axes = FALSE,
col = as.character(TreatColor), pch = 19, xlab = xvar, ylab = RNAgene,
xlim = c(-6, 6))
axis(1, pos = 0)
axis(2, pos = -6, las = 1)
mtext(side = 3, line = 1, text = RNAgene)
if (RNAgene == "AOBratio") {
if (dfname == "megaSD13micro") {mtext(side = 3, line = 3, text = "2013 - 2014")}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 3, text = "2014 - 2015")}
}
if (dfname == "megaSD13micro" & RNAgene == "AOAratio") {mtext(side = 3, line = 3, text = xvar)}
}
}
dev.off()
quartz(type="pdf", file=paste(SD13CombinedOutputPath,"Figures/Expression versus changing soil conditions.pdf",sep=""),height=8.5,width=11,pointsize=14)
par(omi=c(1,1,1,1), mar=c(7,4,2,2), mfrow = c(2, 3))
for (xvar in c("VWC_delta3", "VWC_delta6")){
for(dfname in c("megaSD13micro", "megaSD14micro")){
# Set x-axis limits based on dataset
if (xvar == "VWC_delta3"){if (dfname == "megaSD13micro"){xlimits <- c(-0.04, 0.02)} else {xlimits <- c(-0.025, 0.05)}}
if (xvar == "VWC_delta6"){xlimits <- c(-0.15, 0.05)}
for (RNAgene in c("AOBratio", "AOAratio", "nosZratio")) {
plot(get(RNAgene) ~ get(xvar), data = get(dfname), axes = FALSE,
col = as.character(TreatColor), pch = 19, xlab = xvar, ylab = RNAgene,
xlim = xlimits)
axis(1, pos = 0)
axis(2, pos = xlimits[1], las = 1)
mtext(side = 3, line = 1, text = RNAgene)
if (RNAgene == "AOBratio") {
if (dfname == "megaSD13micro") {mtext(side = 3, line = 3, text = "2013 - 2014")}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 3, text = "2014 - 2015")}
}
if (dfname == "megaSD13micro" & RNAgene == "AOAratio") {mtext(side = 3, line = 3, text = xvar)}
}
}
}
xvar <- "Temp_delta3"
for(dfname in c("megaSD13micro", "megaSD14micro")){
for (RNAgene in c("AOBratio", "AOAratio", "nosZratio")) {
plot(get(RNAgene) ~ get(xvar), data = get(dfname), axes = FALSE,
col = as.character(TreatColor), pch = 19, xlab = xvar, ylab = RNAgene,
xlim = c(-6, 6))
axis(1, pos = 0)
axis(2, pos = -6, las = 1)
mtext(side = 3, line = 1, text = RNAgene)
if (RNAgene == "AOBratio") {
if (dfname == "megaSD13micro") {mtext(side = 3, line = 3, text = "2013 - 2014")}
if (dfname == "megaSD14micro") {mtext(side = 3, line = 3, text = "2014 - 2015")}
}
if (dfname == "megaSD13micro" & RNAgene == "AOAratio") {mtext(side = 3, line = 3, text = xvar)}
}
}
dev.off()
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
?axis
plot(1,1, axes=FALSE)
axis(2, line = NA)
axis(2, line = 1)
axis(1)
axis(2, line = 2)
axis(2, pos = 0.5)
